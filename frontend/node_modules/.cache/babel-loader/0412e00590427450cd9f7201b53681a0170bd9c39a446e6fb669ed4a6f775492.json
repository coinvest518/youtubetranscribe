{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mildh\\\\youtube-audio-extractor\\\\frontend\\\\src\\\\components\\\\DownloadForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DownloadForm = () => {\n  _s();\n  const [youtubeUrl, setYoutubeUrl] = useState('');\n  const [message, setMessage] = useState('');\n  const [transcription, setTranscription] = useState('');\n  const [transcriptId, setTranscriptId] = useState('');\n  const handleDownload = async e => {\n    e.preventDefault();\n    setMessage('');\n    setTranscription('');\n    try {\n      // Step 1: Download the audio\n      const downloadResponse = await axios.post('http://localhost:5000/download', {\n        youtube_url: youtubeUrl\n      });\n      setMessage(downloadResponse.data.message);\n      const fileName = downloadResponse.data.file;\n\n      // Step 2: Start transcription\n      const transcribeResponse = await axios.post('http://localhost:5000/transcribe', {\n        file_name: fileName\n      });\n      setTranscriptId(transcribeResponse.data.transcript_id);\n      setMessage('Transcription in progress...');\n\n      // Step 3: Poll for transcription result\n      pollTranscriptionResult(transcriptId);\n    } catch (error) {\n      setMessage(`Error: ${error.response ? error.response.data.error : error.message}`);\n    }\n  };\n  const pollTranscriptionResult = async id => {\n    const interval = setInterval(async () => {\n      try {\n        const resultResponse = await axios.get(`http://localhost:5000/transcription_result/${id}`);\n        if (resultResponse.data.status === 'completed') {\n          clearInterval(interval);\n          setTranscription(resultResponse.data.text);\n          setMessage('Transcription completed successfully.');\n        } else if (resultResponse.data.status === 'failed') {\n          clearInterval(interval);\n          setMessage('Transcription failed.');\n        }\n      } catch (error) {\n        clearInterval(interval);\n        setMessage('Error fetching transcription result.');\n      }\n    }, 5000); // Poll every 5 seconds\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleDownload,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: youtubeUrl,\n        onChange: e => setYoutubeUrl(e.target.value),\n        placeholder: \"Enter YouTube URL\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Download and Transcribe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 25\n    }, this), transcription && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Transcription:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: transcription\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n_s(DownloadForm, \"wd5vtJZBDWLjmTq8cgfzUr0QzEI=\");\n_c = DownloadForm;\nexport default DownloadForm;\nvar _c;\n$RefreshReg$(_c, \"DownloadForm\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","DownloadForm","_s","youtubeUrl","setYoutubeUrl","message","setMessage","transcription","setTranscription","transcriptId","setTranscriptId","handleDownload","e","preventDefault","downloadResponse","post","youtube_url","data","fileName","file","transcribeResponse","file_name","transcript_id","pollTranscriptionResult","error","response","id","interval","setInterval","resultResponse","get","status","clearInterval","text","children","onSubmit","type","value","onChange","target","placeholder","required","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/mildh/youtube-audio-extractor/frontend/src/components/DownloadForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst DownloadForm = () => {\r\n    const [youtubeUrl, setYoutubeUrl] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [transcription, setTranscription] = useState('');\r\n    const [transcriptId, setTranscriptId] = useState('');\r\n\r\n    const handleDownload = async (e) => {\r\n        e.preventDefault();\r\n        setMessage('');\r\n        setTranscription('');\r\n\r\n        try {\r\n            // Step 1: Download the audio\r\n            const downloadResponse = await axios.post('http://localhost:5000/download', { youtube_url: youtubeUrl });\r\n            setMessage(downloadResponse.data.message);\r\n            const fileName = downloadResponse.data.file;\r\n\r\n            // Step 2: Start transcription\r\n            const transcribeResponse = await axios.post('http://localhost:5000/transcribe', { file_name: fileName });\r\n            setTranscriptId(transcribeResponse.data.transcript_id);\r\n            setMessage('Transcription in progress...');\r\n\r\n            // Step 3: Poll for transcription result\r\n            pollTranscriptionResult(transcriptId);\r\n        } catch (error) {\r\n            setMessage(`Error: ${error.response ? error.response.data.error : error.message}`);\r\n        }\r\n    };\r\n\r\n    const pollTranscriptionResult = async (id) => {\r\n        const interval = setInterval(async () => {\r\n            try {\r\n                const resultResponse = await axios.get(`http://localhost:5000/transcription_result/${id}`);\r\n                if (resultResponse.data.status === 'completed') {\r\n                    clearInterval(interval);\r\n                    setTranscription(resultResponse.data.text);\r\n                    setMessage('Transcription completed successfully.');\r\n                } else if (resultResponse.data.status === 'failed') {\r\n                    clearInterval(interval);\r\n                    setMessage('Transcription failed.');\r\n                }\r\n            } catch (error) {\r\n                clearInterval(interval);\r\n                setMessage('Error fetching transcription result.');\r\n            }\r\n        }, 5000); // Poll every 5 seconds\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleDownload}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={youtubeUrl}\r\n                    onChange={(e) => setYoutubeUrl(e.target.value)}\r\n                    placeholder=\"Enter YouTube URL\"\r\n                    required\r\n                />\r\n                <button type=\"submit\">Download and Transcribe</button>\r\n            </form>\r\n            {message && <p>{message}</p>}\r\n            {transcription && (\r\n                <div>\r\n                    <h3>Transcription:</h3>\r\n                    <p>{transcription}</p>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DownloadForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}