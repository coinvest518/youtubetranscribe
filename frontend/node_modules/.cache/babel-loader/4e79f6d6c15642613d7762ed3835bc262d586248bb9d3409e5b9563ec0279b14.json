{"ast":null,"code":"import React,{useState}from'react';import axios from'axios';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const DownloadForm=()=>{const[youtubeUrl,setYoutubeUrl]=useState('');const[message,setMessage]=useState('');const[transcription,setTranscription]=useState('');const handleDownload=async e=>{e.preventDefault();setMessage('');setTranscription('');try{// Step 1: Download the audio\nconst downloadResponse=await axios.get(`${process.env.REACT_APP_API_URL}/download`,{params:{youtube_url:youtubeUrl}});setMessage(downloadResponse.data.message);const fileName=downloadResponse.data.file;// Step 2: Start transcription\nconst transcribeResponse=await axios.get(`${process.env.REACT_APP_API_URL}/transcribe`,{params:{file_name:fileName}});const id=transcribeResponse.data.transcript_id;setMessage('Transcription in progress...');// Step 3: Poll for transcription result\npollTranscriptionResult(id);}catch(error){setMessage(`Error: ${error.response?error.response.data.error:error.message}`);}};const pollTranscriptionResult=async id=>{const interval=setInterval(async()=>{try{const resultResponse=await axios.get(`${process.env.REACT_APP_API_URL}/transcription_result`,{params:{id:id}});if(resultResponse.data.status==='completed'){clearInterval(interval);setTranscription(resultResponse.data.text||'');setMessage('Transcription completed successfully.');}else if(resultResponse.data.status==='failed'){clearInterval(interval);setMessage('Transcription failed.');}}catch(error){clearInterval(interval);setMessage('Error fetching transcription result.');}},5000);// Poll every 5 seconds\n};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleDownload,children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:youtubeUrl,onChange:e=>setYoutubeUrl(e.target.value),placeholder:\"Enter YouTube URL\",required:true}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Download and Transcribe\"})]}),message&&/*#__PURE__*/_jsx(\"p\",{children:message}),transcription&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Transcription:\"}),/*#__PURE__*/_jsx(\"p\",{children:transcription})]})]});};export default DownloadForm;","map":{"version":3,"names":["React","useState","axios","jsx","_jsx","jsxs","_jsxs","DownloadForm","youtubeUrl","setYoutubeUrl","message","setMessage","transcription","setTranscription","handleDownload","e","preventDefault","downloadResponse","get","process","env","REACT_APP_API_URL","params","youtube_url","data","fileName","file","transcribeResponse","file_name","id","transcript_id","pollTranscriptionResult","error","response","interval","setInterval","resultResponse","status","clearInterval","text","children","onSubmit","type","value","onChange","target","placeholder","required"],"sources":["C:/Users/mildh/youtube-audio-extractor/frontend/src/components/DownloadForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst DownloadForm = () => {\r\n    const [youtubeUrl, setYoutubeUrl] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [transcription, setTranscription] = useState('');\r\n\r\n    const handleDownload = async (e) => {\r\n        e.preventDefault();\r\n        setMessage('');\r\n        setTranscription('');\r\n\r\n        try {\r\n            // Step 1: Download the audio\r\n            const downloadResponse = await axios.get(\r\n                `${process.env.REACT_APP_API_URL}/download`,\r\n                { params: { youtube_url: youtubeUrl } }\r\n            );\r\n            setMessage(downloadResponse.data.message);\r\n            const fileName = downloadResponse.data.file;\r\n\r\n            // Step 2: Start transcription\r\n            const transcribeResponse = await axios.get(\r\n                `${process.env.REACT_APP_API_URL}/transcribe`,\r\n                { params: { file_name: fileName } }\r\n            );\r\n            const id = transcribeResponse.data.transcript_id;\r\n            setMessage('Transcription in progress...');\r\n\r\n            // Step 3: Poll for transcription result\r\n            pollTranscriptionResult(id);\r\n        } catch (error) {\r\n            setMessage(`Error: ${error.response ? error.response.data.error : error.message}`);\r\n        }\r\n    };\r\n\r\n    const pollTranscriptionResult = async (id) => {\r\n        const interval = setInterval(async () => {\r\n            try {\r\n                const resultResponse = await axios.get(\r\n                    `${process.env.REACT_APP_API_URL}/transcription_result`,\r\n                    { params: { id: id } }\r\n                );\r\n                if (resultResponse.data.status === 'completed') {\r\n                    clearInterval(interval);\r\n                    setTranscription(resultResponse.data.text || '');\r\n                    setMessage('Transcription completed successfully.');\r\n                } else if (resultResponse.data.status === 'failed') {\r\n                    clearInterval(interval);\r\n                    setMessage('Transcription failed.');\r\n                }\r\n            } catch (error) {\r\n                clearInterval(interval);\r\n                setMessage('Error fetching transcription result.');\r\n            }\r\n        }, 5000); // Poll every 5 seconds\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleDownload}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={youtubeUrl}\r\n                    onChange={(e) => setYoutubeUrl(e.target.value)}\r\n                    placeholder=\"Enter YouTube URL\"\r\n                    required\r\n                />\r\n                <button type=\"submit\">Download and Transcribe</button>\r\n            </form>\r\n            {message && <p>{message}</p>}\r\n            {transcription && (\r\n                <div>\r\n                    <h3>Transcription:</h3>\r\n                    <p>{transcription}</p>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DownloadForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}